:root {
  overscroll-behavior: none;
  overflow-x: hidden;
}

.amazon-total-sales-table[data-hidden="true"] {
  display: none;
}

.amazon-total-sales-graph[data-hidden="true"] {
  display: none;
}

.modebar { display: none !important; }

._dash-loading {
  display: none;
  background-color: var(--mantine-color-body);
}

.badge-btn:hover{
  cursor: pointer;
}

.mantine-NavLink-root{
  border-radius: var(--mantine-radius-xl)!important;
}

.search-card {
  transition: scale 0.3s;
  scale: 1;
}

.search-card:hover {
  background-color: var(--mantine-color-light-5);
  cursor: pointer;
  scale: 1.01;
  transition: scale 0.3s;
}

.nav-group-container {
  display: flex;
  flex-direction: row;
}

@keyframes fadeInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.fade-in-left {
  opacity: 0;
  animation: fadeInFromLeft 0.6s ease-in-out forwards;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.fade-in-chart {
  opacity: 0;
  animation: fadeIn .3s ease-in-out forwards;
}

@keyframes fadeInFromBottom {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in-bottom {
  opacity: 0;
  animation: fadeInFromBottom 0.6s ease-in-out forwards;
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.fade-in-right {
  opacity: 0;
  animation: fadeInRight 0.6s ease-in-out forwards;
}

@keyframes fadeInTop {
  from {
    opacity: 0;
    transform: translateY(-30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in-top {
  opacity: 0;
  animation: fadeInTop 0.3s ease-in-out forwards;
}


:root[data-mantine-color-scheme="light"]{

  /* body {
      background-color: var(--light-color-body);
  } */
  .mantine-RichTextEditor-content,
  .mantine-RichTextEditor-toolbar,
  .mantine-RichTextEditor-root,
  .mantine-RichTextEditor-control,
  .mantine-RichTextEditor-controlsGroup {
    background-color: var(--light-color-body);
  }

  .mantine-RichTextEditor-controlIcon:hover,
  .mantine-RichTextEditor-control:hover{
    background-color: var(--light-color-card);
  }

  --mantine-color-body: rgb(245, 247, 248) !important;
  .mantine-Paper-root{
    background-color: white;
  }
}

:root{
  --light-color-body: rgb(245, 247, 248);
  --light-color-card: rgb(235, 240, 243);
  --nprogress-color-good: var(--mantine-color-blue-5);
}

.banner {
  background-color: #fa5252; /* Material Red 50 */
  padding: 40px 24px;
  text-align: center;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* Subtle elevation */
  border-radius: 6px;
}

.banner h1 {
  margin: 0;
  font-size: 2rem;
  font-weight: 500;
  color: rgba(0, 0, 0, 0.87);
}

.banner p {
  margin: 8px 0 0;
  font-size: 1rem;
  font-weight: 400;
  color: rgba(0, 0, 0, 0.6);
}


.first-level-slots-container {
  max-width: 100%;
  container-type: inline-size;
}

.slots-container {
  --container-padding: var(--mantine-spacing-md, 1rem);
  --slots-gap: var(--mantine-spacing-md, 1rem);
  gap: var(--slots-gap);
  width: 100%;
  display: flex;
  flex-direction: row;

  @container (max-width: 900px) {
    flex-direction: column;
  }
}

.slots-container > * {
  flex-grow: 1;
  flex-basis: 0;
  min-width: 0;
}

.text-input-button:hover {
  cursor: pointer;
}

.route-card {
  transition: transform 0.2s ease-in-out;
}

.route-card:hover {
  transform: scale(1.05);
}

.grid-bg {
  box-sizing: border-box !important;
  display: table;
  width: 100%;
  height: 99vh;
  background-color: var(--mantine-color-body);  /* Background color */
  line-height: 1.6;
  position: relative;
  font-family: sans-serif;
  overflow: hidden;
}

.line::after {
  content: '';
  display: block;
  position: absolute;
  height: 15vh;
  width: 100%;
  top: -50%;
  left: 0;
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, #ffffff 75%, #ffffff 100%);
  /* controlled by variables below */
  animation: drop var(--drop-duration, 6s) var(--drop-delay, 0s) infinite;
  animation-fill-mode: none; /* let it loop continuously */
  animation-timing-function: cubic-bezier(0.4, 0.26, 0, 0.97);
}

/* Container that spaces multiple .line elements horizontally and keeps them thin */
.lines, .grid-bg {
  --lines-width: 90vw;
}

.lines {
  position: absolute;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
  height: 100%;
  width: var(--lines-width);
  display: flex;
  justify-content: space-between;
  pointer-events: none; /* let clicks pass through if needed */
}

/* Ensure each .line is a thin vertical column instead of expanding full width */
.line {
  position: relative;
  width: 1px; /* thin line */
  min-width: 1px;
  height: 100%;
  overflow: visible;
}

.line::after {
  /* keep the animated block centered on the 1px column */
  left: 50%;
  width: 8px; /* a small horizontal footprint for the gradient so it is visible */
  margin-left: -4px; /* center the 8px block over the 1px column (half of 8px) */
  will-change: left, top;
  border-radius: var(--line-border-radius, 0px);
}

/* Use per-line CSS variables to control color and delay so order is explicit.
   Set inline style="--i:0; --color: #FF4500;" on each .line element from Python. */
.line::after {
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, var(--color, #ffffff) 75%, var(--color, #ffffff) 100%);
  /* simple explicit delays assigned per nth-child below */
  /* animation controlled by inline CSS vars set from Python: */
  /* --anim-name: drop | drop-left | drop-right */
  /* --drop-duration: 6s */
  /* --delay: 0s */
  animation: var(--anim-name, drop) var(--drop-duration, 20s) var(--delay, 0s) infinite cubic-bezier(0.4,0.26,0,0.97);
}

@keyframes drop {
  0% {
    top: -60%;
  }
  80% {
    top: 120%; /* quicker exit toward end so repeats are visible */
  }
  100% {
    top: 120%;
  }
}

/* Horizontal travel animations for some lines. These animate the small
   gradient block across the viewport while keeping it at a fixed vertical
   position controlled by the per-line variable `--h-top`. */
@keyframes left-right {
  0% {
    left: -120vw;
    top: var(--h-top, 30%);
  }
  100% {
    left: 120vw;
    top: var(--h-top, 30%);
  }
}

@keyframes right-left {
  0% {
    left: 120vw;
    top: var(--h-top, 70%);
  }
  100% {
    left: -120vw;
    top: var(--h-top, 70%);
  }
}

/* Styling for horizontal-moving lines: display a short horizontal bar that
   travels left-right or right-left across the screen. */
.line.horizontal::after {
  /* horizontal bar appearance */
  width: var(--h-width, 8vw); /* default narrower visual length */
  height: 6px;
  margin-left: 0;
  top: var(--h-top, 50%);
  left: -120vw; /* start off-canvas for left->right */
  transform: translateY(-50%); /* vertically center on its top position */
  border-radius: var(--line-border-radius, 0px);
  will-change: left, top;
  /* gradient direction controlled by --h-grad-dir (e.g. 'to right' or 'to left') */
  background: linear-gradient(var(--h-grad-dir, to right), rgba(255,255,255,0) 0%, var(--color, #ffffff) 25%, var(--color, #ffffff) 100%);
  /* horizontal animation uses the same --anim-name defined on the element */
  animation-timing-function: linear;
}

/* diagonal variants removed: lines will only use the vertical `drop` animation */
/* Remove per-line diagonal overrides so all lines animate with `drop` only. */
